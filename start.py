import os
import time
import re
import threading

import pyautogui
import keyboard

LOG_PATH = r"C:\Program Files (x86)\Steam\steamapps\common\Counter-Strike Global Offensive\game\csgo\console.log"
PLAYER_NAME = "awall propeller"

RECONNECT_TEMPLATE = "reconnect_button.png"
ACCEPT_TEMPLATE    = "accept_button.png"

CONFIDENCE            = 0.8   # –ø–æ—Ä–æ–≥ –¥–ª—è –æ–±–æ–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
PRE_DISCONNECT_DELAY  = 2.5   # –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ-J
AFTER_DISCONNECT_DELAY = 2.5  # –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ J –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º Reconnect
BUTTON_TIMEOUT        = 10.0  # –º–∞–∫—Å. –∂–¥–∞—Ç—å Reconnect
ACCEPT_CHECK_INTERVAL = 0.5   # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–∫–∏ Accept
# -----------------------------------------

auto_accept_enabled = True  # —Ñ–ª–∞–≥ –∞–≤—Ç–æ-accept
exit_event = threading.Event()


def tail_log(path):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä–æ–∫, —Ç–∏–ø–∞ tail -F."""
    with open(path, "r", encoding="utf-8", errors="ignore") as f:
        f.seek(0, os.SEEK_END)
        while not exit_event.is_set():
            line = f.readline()
            if not line:
                time.sleep(0.1)
                continue
            yield line


def accept_monitor():
    """
    –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–Ω–æ–ø–∫–∏ Accept.
    –ö–∞–∂–¥—ã–µ ACCEPT_CHECK_INTERVAL —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —ç–∫—Ä–∞–Ω.
    –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –∞–≤—Ç–æ-accept –≤–∫–ª—é—á—ë–Ω, –∫–ª–∏–∫–∞–µ—Ç –ø–æ –Ω–µ–π.
    """
    while not exit_event.is_set():
        if auto_accept_enabled:
            try:
                btn = pyautogui.locateOnScreen(
                    ACCEPT_TEMPLATE,
                    confidence=CONFIDENCE,
                    grayscale=True
                )
            except pyautogui.ImageNotFoundException:
                btn = None

            if btn:
                print("üîî Accept button detected, clicking in 1s...")
                time.sleep(2.0)
                x, y = pyautogui.center(btn)
                pyautogui.click(x, y)
                print("[match accepted]")
        time.sleep(ACCEPT_CHECK_INTERVAL)


def cycle_reconnect(tailer, pattern):
    """
    –ê–≤—Ç–æ-—Ü–∏–∫–ª –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞:
      1) press('j') ‚Üí disconnect
      2) –∂–¥–∞—Ç—å Reconnect (–¥–æ BUTTON_TIMEOUT) ‚Üí –∫–ª–∏–∫
      3) –∂–¥–∞—Ç—å –≤ –ª–æ–≥–µ –≤—Ç–æ—Ä–æ–µ –ø–æ–¥—Ä—è–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ connected
    """
    while not exit_event.is_set():
        print(f"‚Ä¶waiting {PRE_DISCONNECT_DELAY:.1f}s before auto-disconnect‚Ä¶")
        time.sleep(PRE_DISCONNECT_DELAY)

        print("‚Üí auto-press J (disconnect)")
        pyautogui.press('j')
        time.sleep(AFTER_DISCONNECT_DELAY)

        print(f"‚Ä¶waiting up to {BUTTON_TIMEOUT:.0f}s for Reconnect button‚Ä¶", end="", flush=True)
        start = time.time()
        btn = None
        while time.time() - start < BUTTON_TIMEOUT and not exit_event.is_set():
            try:
                btn = pyautogui.locateOnScreen(
                    RECONNECT_TEMPLATE,
                    confidence=CONFIDENCE,
                    grayscale=True
                )
            except pyautogui.ImageNotFoundException:
                btn = None
            if btn:
                print(" found!")
                break
            time.sleep(0.2)
        else:
            print(f"\n‚úÖ No Reconnect button in {BUTTON_TIMEOUT}s ‚Äî ending cycle.")
            return

        x, y = pyautogui.center(btn)
        print(f"‚Üí click reconnect at ({x},{y})")
        pyautogui.click(x, y)

        print("‚Ä¶waiting for actual reconnect in log (skip duplicate)‚Ä¶")
        skip_once = True
        for line in tailer:
            if pattern.search(line):
                if skip_once:
                    print("[skip dup ]", line.strip())
                    skip_once = False
                    continue
                print("[got reconnect]", line.strip())
                break


def toggle_accept():
    global auto_accept_enabled
    auto_accept_enabled = not auto_accept_enabled
    status = 'ENABLED' if auto_accept_enabled else 'DISABLED'
    print(f"üîÅ Auto-accept {status}")


def main():
    threading.Thread(target=accept_monitor, daemon=True).start()

    keyboard.add_hotkey('f2', toggle_accept)
    print("Press F2 to toggle auto-accept on/off.")

    pattern = re.compile(rf"\b{re.escape(PLAYER_NAME)} connected\b", re.IGNORECASE)

    print("=== CS2 Auto-Disconnect / Reconnect / Accept ===")
    try:
        while not exit_event.is_set():
            tailer = tail_log(LOG_PATH)

            print("\nWaiting for match start (first 'connected')‚Ä¶")
            for line in tailer:
                if pattern.search(line):
                    print("[match start ]", line.strip())
                    break

            print("Press J once (after 1st round starts) to begin auto-cycle.")
            keyboard.wait('j')
            print("[manual J   ] starting auto-reconnect loop‚Ä¶")

            cycle_reconnect(tailer, pattern)

            print("\n=== Match cycle ended; ready for next match‚Ä¶ ===")

    except KeyboardInterrupt:
        print("\nInterrupted by user; exiting.")
    finally:
        exit_event.set()


if __name__ == "__main__":
    main()